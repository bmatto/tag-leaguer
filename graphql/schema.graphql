type Query {
  users: [User!]!
  user(userId: ID!): User
  searchUsers(term: String): [User!]
  events: [Event!]
  event(eventId: ID!): Event
  courses: [Course!]
  course(courseId: ID!): Course
  scores: [Score!]
  tags: [Tag!]
  tag(tagId: ID!): Tag
}

type Mutation {
  addEvent(input: EventInput!): Event
  deleteEvent(eventId: ID!): Event
  addUsersToEvent(input: UsersEventInput!): User
  createNewUser(input: CreateNewUserInput!): User
  removeUserFromEvent(userId: ID!, eventId: ID!): Boolean
}

input EventInput {
  courseId: ID!
  title: String!
  date: String
}

input UsersEventInput {
  userIds: [ID!]
  eventId: ID!
}

input CreateNewUserInput {
  firstname: String!
  lastname: String!
  email: String
  eventId: ID
}

type Score {
  id: ID
  strokes: Int
  tag: Tag
  date: String
  user: User!
  event: Event!
}

type User {
  id: ID
  firstname: String
  lastname: String
  email: String
  scores: [Score!]
  events: [Event!]

  eventScore: Score
  lastEventTag: Tag
}

type Event {
  id: ID
  date: String
  title: String
  course: Course
  scores: [Score!]
  users: [User!]
}

type Course {
  id: ID
  name: String
  events: [Event!]
}

type Tag {
  id: ID
  number: Int
  course: Course
  user: User
  scores: [Score!]
}
